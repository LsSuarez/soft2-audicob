using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Audicob.Data;

namespace Audicob.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MigrationController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public MigrationController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpPost("aplicar-mora")]
        public async Task<IActionResult> AplicarMigracionesMora()
        {
            try
            {
                // SQL para agregar columna EstadoMora si no existe
                await _context.Database.ExecuteSqlRawAsync(@"
                    DO $$ 
                    BEGIN 
                        IF NOT EXISTS (
                            SELECT 1 FROM information_schema.columns 
                            WHERE table_name = 'Clientes' AND column_name = 'EstadoMora'
                        ) THEN
                            ALTER TABLE ""Clientes"" ADD COLUMN ""EstadoMora"" text NOT NULL DEFAULT 'Al día';
                        END IF;
                    END $$;
                ");

                // SQL para crear tabla HistorialEstadosMora si no existe
                await _context.Database.ExecuteSqlRawAsync(@"
                    CREATE TABLE IF NOT EXISTS ""HistorialEstadosMora"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""ClienteId"" integer NOT NULL,
                        ""EstadoAnterior"" character varying(50) NOT NULL,
                        ""NuevoEstado"" character varying(50) NOT NULL,
                        ""UsuarioId"" text NOT NULL,
                        ""FechaCambio"" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
                        ""MotivoCambio"" character varying(200) NOT NULL,
                        ""Observaciones"" character varying(500),
                        ""DireccionIP"" character varying(100),
                        ""UserAgent"" character varying(200),
                        CONSTRAINT ""PK_HistorialEstadosMora"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_HistorialEstadosMora_Clientes_ClienteId"" FOREIGN KEY (""ClienteId"") REFERENCES ""Clientes"" (""Id"") ON DELETE CASCADE,
                        CONSTRAINT ""FK_HistorialEstadosMora_AspNetUsers_UsuarioId"" FOREIGN KEY (""UsuarioId"") REFERENCES ""AspNetUsers"" (""Id"") ON DELETE RESTRICT
                    );
                ");

                // SQL para crear tabla FiltrosGuardados si no existe
                await _context.Database.ExecuteSqlRawAsync(@"
                    CREATE TABLE IF NOT EXISTS ""FiltrosGuardados"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""Nombre"" character varying(100) NOT NULL,
                        ""UserId"" text NOT NULL,
                        ""ConfiguracionJson"" text NOT NULL,
                        ""FechaCreacion"" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
                        ""EsPredeterminado"" boolean NOT NULL DEFAULT FALSE,
                        CONSTRAINT ""PK_FiltrosGuardados"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_FiltrosGuardados_AspNetUsers_UserId"" FOREIGN KEY (""UserId"") REFERENCES ""AspNetUsers"" (""Id"") ON DELETE CASCADE
                    );
                ");

                // Crear índices para mejor performance
                await _context.Database.ExecuteSqlRawAsync(@"
                    CREATE INDEX IF NOT EXISTS ""IX_HistorialEstadosMora_ClienteId"" ON ""HistorialEstadosMora"" (""ClienteId"");
                ");
                
                await _context.Database.ExecuteSqlRawAsync(@"
                    CREATE INDEX IF NOT EXISTS ""IX_HistorialEstadosMora_FechaCambio"" ON ""HistorialEstadosMora"" (""FechaCambio"");
                ");
                
                await _context.Database.ExecuteSqlRawAsync(@"
                    CREATE INDEX IF NOT EXISTS ""IX_HistorialEstadosMora_Cliente_Fecha"" ON ""HistorialEstadosMora"" (""ClienteId"", ""FechaCambio"");
                ");

                // Marcar las migraciones como aplicadas
                await _context.Database.ExecuteSqlRawAsync(@"
                    INSERT INTO ""__EFMigrationsHistory"" (""MigrationId"", ""ProductVersion"")
                    VALUES ('20251026031557_AddMoraFunctionalities', '9.0.0')
                    ON CONFLICT (""MigrationId"") DO NOTHING;
                ");

                await _context.Database.ExecuteSqlRawAsync(@"
                    INSERT INTO ""__EFMigrationsHistory"" (""MigrationId"", ""ProductVersion"")
                    VALUES ('20251026033549_AgregarTablaFiltrosGuardados', '9.0.0')
                    ON CONFLICT (""MigrationId"") DO NOTHING;
                ");

                return Ok(new { message = "Migraciones aplicadas correctamente" });
            }
            catch (Exception ex)
            {
                return BadRequest(new { error = ex.Message, details = ex.InnerException?.Message });
            }
        }
    }
}