@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

<!-- Campana de Notificaciones -->
<div class="dropdown" id="notificacionesDropdown">
    <button class="btn btn-link position-relative" type="button" id="notificacionesBtn" data-bs-toggle="dropdown"
        aria-expanded="false">
        <i class="bi bi-bell-fill" style="font-size: 1.5rem; color: #333;"></i>
        <span id="contadorNotificaciones"
            class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
            style="display: none;">
            0
        </span>
    </button>

    <!-- Dropdown Menu de Notificaciones -->
    <div class="dropdown-menu dropdown-menu-end" style="min-width: 350px; max-height: 500px; overflow-y: auto;"
        id="notificacionesMenu">
        <div class="dropdown-header">
            <strong>Notificaciones</strong>
        </div>
        <div id="listaNotificaciones">
            <div class="text-center p-3">
                <small class="text-muted">Cargando...</small>
            </div>
        </div>
        <div class="dropdown-divider"></div>
        <a class="dropdown-item text-center small" href="@Url.Action("Index", "Notificaciones")">
            Ver todas las notificaciones
        </a>
    </div>
</div>

<style>
    .notificacion-item {
        padding: 10px 15px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .notificacion-item:hover {
        background-color: #f8f9fa;
    }

    .notificacion-item.no-leida {
        background-color: #e7f3ff;
        font-weight: 500;
    }

    .notificacion-icono {
        font-size: 1.5rem;
        margin-right: 10px;
    }

    .notificacion-contenido {
        flex-grow: 1;
    }

    .notificacion-titulo {
        font-weight: 600;
        margin-bottom: 3px;
        font-size: 0.9rem;
    }

    .notificacion-descripcion {
        font-size: 0.85rem;
        color: #666;
        margin-bottom: 3px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .notificacion-fecha {
        font-size: 0.75rem;
        color: #999;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        cargarNotificaciones();

        // Recargar notificaciones cada 30 segundos
        setInterval(cargarNotificaciones, 30000);
    });

    function cargarNotificaciones() {
        fetch('/api/notificaciones/mis-notificaciones')
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.error || 'Error en la respuesta del servidor');
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Notificaciones recibidas:', data);
                if (!Array.isArray(data)) {
                    throw new Error('Formato de datos inv치lido');
                }
                // Mostrar solo las 5 m치s recientes en el dropdown
                const notificacionesRecientes = data.slice(0, 5);
                mostrarNotificaciones(notificacionesRecientes);
                actualizarContador(data);
            })
            .catch(error => {
                console.error('Error al cargar notificaciones:', error);
                const lista = document.getElementById('listaNotificaciones');
                lista.innerHTML = `<div class="text-center p-3"><small class="text-danger">Error: ${error.message}</small></div>`;
            });
    }

    function mostrarNotificaciones(notificaciones) {
        const lista = document.getElementById('listaNotificaciones');

        if (notificaciones.length === 0) {
            lista.innerHTML = '<div class="text-center p-3"><small class="text-muted">No hay notificaciones</small></div>';
            return;
        }

        let html = '';
        notificaciones.forEach(notificacion => {
            const claseNoLeida = notificacion.leida ? '' : 'no-leida';
            const fecha = formatearFecha(notificacion.fechaCreacion);
            
            // Debug: ver fechas en consola
            console.log('Notificaci칩n:', {
                titulo: notificacion.titulo,
                fechaCreacion: notificacion.fechaCreacion,
                fechaLectura: notificacion.fechaLectura,
                leida: notificacion.leida
            });

            html += `
            <div class="notificacion-item ${claseNoLeida} d-flex align-items-start" onclick="marcarComoLeida(${notificacion.id})">
                <span class="notificacion-icono">${notificacion.iconoTipo || '游늶'}</span>
                <div class="notificacion-contenido">
                    <div class="notificacion-titulo">${escapeHtml(notificacion.titulo)}</div>
                    <div class="notificacion-descripcion">${escapeHtml(notificacion.descripcion)}</div>
                    <div class="notificacion-fecha">${fecha}</div>
                </div>
            </div>
        `;
        });

        lista.innerHTML = html;
    }

    function actualizarContador(notificaciones) {
        const contador = notificaciones.filter(n => !n.leida).length;
        const badge = document.getElementById('contadorNotificaciones');

        if (contador > 0) {
            badge.textContent = contador > 99 ? '99+' : contador;
            badge.style.display = 'inline-block';
        } else {
            badge.style.display = 'none';
        }
    }

    function marcarComoLeida(id) {
        fetch(`/api/notificaciones/marcar-leida/${id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al marcar notificaci칩n');
                }
                return response.json();
            })
            .then(() => {
                cargarNotificaciones();
            })
            .catch(error => console.error('Error al marcar notificaci칩n:', error));
    }

    function formatearFecha(fechaString) {
        const fecha = new Date(fechaString);
        const ahora = new Date();
        const diferencia = ahora - fecha;
        const minutos = Math.floor(diferencia / 60000);
        const horas = Math.floor(diferencia / 3600000);
        const dias = Math.floor(diferencia / 86400000);

        if (minutos < 1) return 'Ahora';
        if (minutos < 60) return `Hace ${minutos} min`;
        if (horas < 24) return `Hace ${horas} h`;
        if (dias < 7) return `Hace ${dias} d`;
        
        return fecha.toLocaleDateString('es-ES', { 
            day: '2-digit', 
            month: '2-digit', 
            year: 'numeric' 
        });
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
</script>